import React, { useState } from 'react';
import { Calendar, Clock, CheckCircle, AlertCircle, Loader, LogIn, ExternalLink } from 'lucide-react';

const CalendarIntegration = ({ studyPlan, onClose }) => {
    const [isLoading, setIsLoading] = useState(false);
    const [message, setMessage] = useState('');
    const [messageType, setMessageType] = useState(''); // 'success' or 'error'
    const [showManualInstructions, setShowManualInstructions] = useState(false);
    const [startDate, setStartDate] = useState(() => {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        return tomorrow.toISOString().split('T')[0];
    });

    const generateCalendarEvents = () => {
        const dailyPlans = studyPlan.daily_plans || {};
        const events = [];
        const startDateTime = new Date(startDate);

        for (const [day, tasks] of Object.entries(dailyPlans)) {
            if (!tasks || tasks.length === 0) {
                startDateTime.setDate(startDateTime.getDate() + 1);
                continue;
            }

            // Morning session (9 AM - 12 PM)
            const morningStart = new Date(startDateTime);
            morningStart.setHours(9, 0, 0, 0);
            const morningEnd = new Date(morningStart);
            morningEnd.setHours(12, 0, 0, 0);

            // Afternoon session (2 PM - 5 PM)
            const afternoonStart = new Date(startDateTime);
            afternoonStart.setHours(14, 0, 0, 0);
            const afternoonEnd = new Date(afternoonStart);
            afternoonEnd.setHours(17, 0, 0, 0);

            const midPoint = Math.ceil(tasks.length / 2);
            const morningTasks = tasks.slice(0, midPoint);
            const afternoonTasks = tasks.slice(midPoint);

            // Create morning event
            if (morningTasks.length > 0) {
                events.push({
                    title: `📚 Study Session - ${day} (Morning)`,
                    start: morningStart,
                    end: morningEnd,
                    description: `🎯 StudyMentor AI-Generated Study Session\n\nTasks for this session:\n${morningTasks.map((task, i) => `${i + 1}. ${task}`).join('\n')}\n\n💡 Generated by StudyMentor`
                });
            }

            // Create afternoon event
            if (afternoonTasks.length > 0) {
                events.push({
                    title: `📖 Study Session - ${day} (Afternoon)`,
                    start: afternoonStart,
                    end: afternoonEnd,
                    description: `🎯 StudyMentor AI-Generated Study Session\n\nTasks for this session:\n${afternoonTasks.map((task, i) => `${i + 1}. ${task}`).join('\n')}\n\n💡 Generated by StudyMentor`
                });
            }

            startDateTime.setDate(startDateTime.getDate() + 1);
        }

        return events;
    };

    const createGoogleCalendarUrl = (event) => {
        const formatDate = (date) => {
            return date.toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '');
        };

        const params = new URLSearchParams({
            action: 'TEMPLATE',
            text: event.title,
            dates: `${formatDate(event.start)}/${formatDate(event.end)}`,
            details: event.description,
            location: '',
            trp: 'false'
        });

        return `https://calendar.google.com/calendar/render?${params.toString()}`;
    };

    const handleAddToCalendar = async () => {
        try {
            setIsLoading(true);
            setMessage('Preparing your calendar events...');
            setMessageType('success');

            // Generate events
            const events = generateCalendarEvents();

            // Simulate processing time
            await new Promise(resolve => setTimeout(resolve, 1500));

            if (events.length === 0) {
                setMessage('No study sessions to add. Please check your study plan.');
                setMessageType('error');
                return;
            }

            // Show manual instructions
            setShowManualInstructions(true);
            setMessage(`Ready to add ${events.length} study sessions to your Google Calendar!`);
            setMessageType('success');

        } catch (error) {
            console.error('Calendar preparation error:', error);
            setMessage('Failed to prepare calendar events. Please try again.');
            setMessageType('error');
        } finally {
            setIsLoading(false);
        }
    };

    const openAllCalendarEvents = () => {
        const events = generateCalendarEvents();

        events.forEach((event, index) => {
            setTimeout(() => {
                const url = createGoogleCalendarUrl(event);
                window.open(url, `calendar-event-${index}`, 'width=600,height=700');
            }, index * 500); // Stagger the opening by 500ms each
        });

        setMessage(`🎉 Opened ${events.length} Google Calendar tabs! Click "Save" on each tab to add the events to your calendar.`);
        setMessageType('success');
    };

    const downloadICSFile = () => {
        const events = generateCalendarEvents();
        let icsContent = 'BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:StudyMentor\nCALSCALE:GREGORIAN\n';

        events.forEach((event, index) => {
            const formatICSDate = (date) => {
                return date.toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '');
            };

            icsContent += `BEGIN:VEVENT\n`;
            icsContent += `UID:studymentor-${index}-${Date.now()}@studymentor.app\n`;
            icsContent += `DTSTART:${formatICSDate(event.start)}\n`;
            icsContent += `DTEND:${formatICSDate(event.end)}\n`;
            icsContent += `SUMMARY:${event.title}\n`;
            icsContent += `DESCRIPTION:${event.description.replace(/\n/g, '\\n')}\n`;
            icsContent += `STATUS:CONFIRMED\n`;
            icsContent += `BEGIN:VALARM\n`;
            icsContent += `TRIGGER:-PT30M\n`;
            icsContent += `ACTION:DISPLAY\n`;
            icsContent += `DESCRIPTION:Study session reminder\n`;
            icsContent += `END:VALARM\n`;
            icsContent += `END:VEVENT\n`;
        });

        icsContent += 'END:VCALENDAR';

        const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'StudyMentor-Schedule.ics';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);

        setMessage('📥 Calendar file downloaded! Import it into Google Calendar, Outlook, or any calendar app.');
        setMessageType('success');
    };

    const formatStudyPlanSummary = () => {
        if (!studyPlan) return null;

        const dailyPlans = studyPlan.daily_plans || {};
        const totalDays = Object.keys(dailyPlans).length;
        const subjects = studyPlan.subjects || [];

        return (
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 mb-6 border border-blue-200">
                <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <Calendar className="h-4 w-4 mr-2 text-blue-600" />
                    📋 Study Plan Summary
                </h4>
                <div className="grid grid-cols-2 gap-4 text-sm text-gray-700">
                    <div className="flex items-center">
                        <span className="font-medium">📅 Total Days:</span>
                        <span className="ml-2 px-2 py-1 bg-blue-100 rounded-full text-blue-800 font-semibold">{totalDays}</span>
                    </div>
                    <div className="flex items-center">
                        <span className="font-medium">⏱️ Total Hours:</span>
                        <span className="ml-2 px-2 py-1 bg-indigo-100 rounded-full text-indigo-800 font-semibold">{studyPlan.total_hours || 'N/A'}</span>
                    </div>
                    <div className="col-span-2">
                        <span className="font-medium">📚 Subjects:</span>
                        <div className="mt-1 flex flex-wrap gap-1">
                            {subjects.map((subject, index) => (
                                <span key={index} className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">
                                    {subject}
                                </span>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        );
    };

    if (!studyPlan) {
        return (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                    <div className="text-center">
                        <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
                        <h3 className="text-lg font-semibold text-gray-900 mb-2">No Study Plan</h3>
                        <p className="text-gray-600 mb-4">
                            Please generate a study plan first before syncing to calendar.
                        </p>
                        <button
                            onClick={onClose}
                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            Close
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto">
                <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center space-x-3">
                        <div className="p-2 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg">
                            <Calendar className="h-6 w-6 text-white" />
                        </div>
                        <h3 className="text-xl font-semibold text-gray-900">
                            Add to Google Calendar
                        </h3>
                    </div>
                    <button
                        onClick={onClose}
                        className="text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-full hover:bg-gray-100"
                    >
                        <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                {formatStudyPlanSummary()}

                <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                        <Clock className="inline h-4 w-4 mr-1" />
                        Start Date
                    </label>
                    <input
                        type="date"
                        value={startDate}
                        onChange={(e) => setStartDate(e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                        min={new Date().toISOString().split('T')[0]}
                    />
                    <p className="text-xs text-gray-500 mt-1">
                        Study sessions will be scheduled starting from this date
                    </p>
                </div>

                {message && (
                    <div className={`mb-6 p-4 rounded-lg flex items-start space-x-3 ${messageType === 'success'
                            ? 'bg-green-50 border border-green-200'
                            : 'bg-red-50 border border-red-200'
                        }`}>
                        {messageType === 'success' ? (
                            <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                        ) : (
                            <AlertCircle className="h-5 w-5 text-red-600 mt-0.5 flex-shrink-0" />
                        )}
                        <div className={`text-sm ${messageType === 'success' ? 'text-green-800' : 'text-red-800'
                            }`}>
                            <pre className="whitespace-pre-wrap font-sans">{message}</pre>
                        </div>
                    </div>
                )}

                {!showManualInstructions ? (
                    <div className="space-y-3">
                        <button
                            onClick={handleAddToCalendar}
                            disabled={isLoading}
                            className="w-full flex items-center justify-center space-x-2 px-4 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl transform hover:scale-[1.02]"
                        >
                            {isLoading ? (
                                <Loader className="h-5 w-5 animate-spin" />
                            ) : (
                                <Calendar className="h-5 w-5" />
                            )}
                            <span className="font-medium">
                                {isLoading ? 'Preparing Events...' : '🗓️ Add to Google Calendar'}
                            </span>
                        </button>
                    </div>
                ) : (
                    <div className="space-y-3">
                        <h4 className="font-medium text-gray-900 mb-3">Choose your preferred method:</h4>

                        <button
                            onClick={openAllCalendarEvents}
                            className="w-full flex items-center justify-center space-x-2 px-4 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02]"
                        >
                            <ExternalLink className="h-5 w-5" />
                            <span className="font-medium">Open Google Calendar Links</span>
                        </button>
                        <p className="text-xs text-gray-600 text-center">Opens each event in Google Calendar (recommended)</p>

                        <div className="relative">
                            <div className="absolute inset-0 flex items-center">
                                <div className="w-full border-t border-gray-300" />
                            </div>
                            <div className="relative flex justify-center text-sm">
                                <span className="px-2 bg-white text-gray-500">or</span>
                            </div>
                        </div>

                        <button
                            onClick={downloadICSFile}
                            className="w-full flex items-center justify-center space-x-2 px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02]"
                        >
                            <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <span className="font-medium">Download Calendar File</span>
                        </button>
                        <p className="text-xs text-gray-600 text-center">Import into any calendar app</p>
                    </div>
                )}

                <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                    <h4 className="font-medium text-blue-900 mb-2 flex items-center">
                        <span className="mr-2">📝</span>
                        What gets created in your calendar:
                    </h4>
                    <ul className="text-sm text-blue-800 space-y-1.5 list-none">
                        <li className="flex items-center"><span className="mr-2">🌅</span>Morning sessions: 9:00 AM - 12:00 PM</li>
                        <li className="flex items-center"><span className="mr-2">🌆</span>Afternoon sessions: 2:00 PM - 5:00 PM</li>
                        <li className="flex items-center"><span className="mr-2">📋</span>Detailed task descriptions for each session</li>
                        <li className="flex items-center"><span className="mr-2">🔔</span>30-minute reminder notifications</li>
                        <li className="flex items-center"><span className="mr-2">🎯</span>AI-optimized study schedule</li>
                        <li className="flex items-center"><span className="mr-2">✨</span>No complex setup required!</li>
                    </ul>
                </div>

                <div className="mt-4 flex justify-end">
                    <button
                        onClick={onClose}
                        className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors hover:bg-gray-100 rounded-lg"
                    >
                        Close
                    </button>
                </div>
            </div>
        </div>
    );
};

export default CalendarIntegration;